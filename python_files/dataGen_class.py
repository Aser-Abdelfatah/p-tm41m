import argparse
import json
import sys

import psycopg2
from ollama import Client

from informationSchemaParser import DatabaseDDLGenerator


# initial states
class dataGenerator:
    def __init__(self, database_name, host, user, password):
        self.database_name = database_name
        self.host = host
        self.user = user
        self.password = password
        self.ddl_generator = DatabaseDDLGenerator(self.database_name,self.host,self.user,self.password)
    
    def input_question(self,question):
        input_instructions = f"""
          ### Instructions:
          Your task is to convert a question into a SQL query, given a Postgres database schema.
          Adhere to these rules:
          - **Deliberately go through the question and database schema word by word** to appropriately answer the question
          - **Use Table Aliases** to prevent ambiguity. For example, `SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id`.
          - When creating a ratio, always cast the numerator as float
          """
        input_init_message = f"""
          ### Input:
          Generate a SQL query that answers the question `{question}`.
          This query will run on a database whose schema is represented in this string:
          """
        input_script_message = self.ddl_generator.ddl_statements_prompt()
        input_response = f"""
          ### Response:
          Based on your instructions, here is the SQL query I have generated to answer the question \n `{question}` \n:
          ```sql
          """
        input_entire_message = input_instructions + '\n' + '\n' + input_init_message + '\n' + input_script_message + '\n'+ '\n'+  '\n' + input_response
        print(input_entire_message)

        client = Client(host='http://localhost:11434')
        response = client.chat(model='sqlcoder', messages=[
          {
            'role': 'user',
            'content': input_entire_message,
          },
        ])
        sql_query = response['message']['content']                       # Get the SQL query generated by the SQLCoder model
        sql_query = sql_query.replace('```sql\n', '').replace('```', '') # Remove Markdown formatting from the SQL query
        print(sql_query)
        conn = psycopg2.connect(                                         # Connect to the PostgreSQL database
            dbname=self.database_name,
            user=self.user,
            password=self.password,
            host=self.host
        )
        # Execute the SQL query against the database
        with conn.cursor() as cursor:
            cursor.execute(sql_query)
            result = cursor.fetchall()
            for row in result:
                print(row)
        # Close the connection
        conn.close()
# stream = ollama.chat(
#     model='sqlcoder',
#     messages=[
#         {'role': 'user', 'content': input_entire_message},
#     ],
#     stream=True,
# )

# for chunk in stream:
#     print(chunk['message']['content'], end='', flush=True)

# Example Usage
modelRun = dataGenerator("postgres","localhost","postgres","123456")
parser = argparse.ArgumentParser()
parser.add_argument( '--q', type=str)           # positional argument
args = parser.parse_args()

modelRun.input_question(args.q)